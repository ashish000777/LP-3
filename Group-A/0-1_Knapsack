import queue

def knapsack(values, weights, capacity):
    """
    Solves the 0-1 Knapsack problem using dynamic programming.

    Args:
        values: A list of values of the items.
        weights: A list of weights of the items.
        capacity: The capacity of the knapsack.

    Returns:
        The maximum value that can be put in the knapsack.
    """

    n = len(values)
    table = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] > w:
                table[i][w] = table[i - 1][w]
            else:
                table[i][w] = max(table[i - 1][w], values[i - 1] + table[i - 1][w - weights[i - 1]])

    return table[n][capacity]


def knapsack_branch_and_bound(values, weights, capacity):
    """
    Solves the 0-1 Knapsack problem using branch and bound strategy.

    Args:
        values: A list of values of the items.
        weights: A list of weights of the items.
        capacity: The capacity of the knapsack.

    Returns:
        The maximum value that can be put in the knapsack.
    """

    queue = PriorityQueue()
    queue.put((0, 0, []))

    best_value = 0
    best_solution = []

    while not queue.empty():
        current_value, current_weight, current_solution = queue.get()

        if current_weight > capacity:
            continue

        if current_value > best_value:
            best_value = current_value
            best_solution = current_solution

        for i in range(len(values)):
            if i not in current_solution:
                new_value = current_value + values[i]
                new_weight = current_weight + weights[i]
                new_solution = current_solution + [i]

                queue.put((new_value, new_weight, new_solution))

    return best_value, best_solution


def main():
    print("Enter the number of items:")
    n = int(input())

    print("Enter the values of the items:")
    values = [int(input()) for _ in range(n)]

    print("Enter the weights of the items:")
    weights = [int(input()) for _ in range(n)]

    print("Enter the capacity of the knapsack:")
    capacity = int(input())

    algorithm = input("Choose an algorithm (dp/bb): ")

    if algorithm == "dp":
        max_value = knapsack(values, weights, capacity)
        print(f"The maximum value that can be put in the knapsack is {max_value}.")
    elif algorithm == "bb":
        best_value, best_solution = knapsack_branch_and_bound(values, weights, capacity)
        print(f"The maximum value that can be put in the knapsack is {best_value}.")
        print(f"The best solution is {best_solution}.")
    else:
        print("Invalid algorithm.")


if __name__ == "__main__":
    main()
